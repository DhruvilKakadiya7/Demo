datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
}

generator client{
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN
  MOD
  REFERRER
  USER
  SELLER
  UPLOADER
}

enum Status{
  PENDING
  ACCEPTED
  REJECTED
}


model Member {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   
  codeForces    String    @unique
  leetcode      String
  linkedIn      String?
  forms         Form[]
}

model Form{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  formId        String    @db.ObjectId
  resume        String
  message       String
  organization  String
  phoneNumber   String
  cgpa          String
  yoe           String
  jobId         String
  yog           String
  isGraduated    Boolean? @default(false)
  status        Status @default(PENDING)
  formCreatedAt  DateTime   @default(now())
  referrerResponse String?

  verifiedBy        String?     @db.ObjectId    
  verifiedAt        DateTime?                    

  member Member @relation(fields: [formId], references: [id], onDelete: Cascade)
  verifiedByUser    User?       @relation("VerifiedForms", fields: [verifiedBy], references: [id])
}


model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  phoneNumber   String   @unique
  email         String?   
  emailVerified DateTime?
  image         String?
  password      String?
  organization  String?
  isVerified    Boolean @default(false)
 
  verifiedBy          String?     @db.ObjectId   
  verifiedAt          DateTime?                   

  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  verifiedByUser      User?       @relation("VerifiedBy", fields: [verifiedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  verifiedForms       Form[]      @relation("VerifiedForms")
  verifiedUsers       User[]      @relation("VerifiedBy")
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token String @unique
  expires DateTime

  @@unique([phoneNumber,token])
}

model PasswordResetToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token String @unique
  expires DateTime

  @@unique([phoneNumber,token])
}


model TwoFactorToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token String @unique
  expires DateTime

  @@unique([phoneNumber,token])
}

model TwoFactorConfirmation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  @@unique([userId])
}



// secret Token

model SecretToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cfUserName String
  token String @unique
  discordId String
  tokenIssuedAt  DateTime   @default(now())
  expires DateTime

  @@unique([cfUserName,token])
}

// organization

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  name String

}

model Party {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  name String
  countOfPiece Int @default(0)
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  code String? @unique
  name String
  countOfPiece Int @default(0)
  countOfDesign Int? @default(0)
}




model User2 {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    password      String?
    image         String?
    isVerified    Boolean   @default(false)
    
    verifiedBy          String?     @db.ObjectId   
    verifiedAt          DateTime?                   

    role          UserRole @default(SELLER)

    verifiedByUser      User2?       @relation("VerifiedBy", fields: [verifiedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    verifiedUsers       User2[]      @relation("VerifiedBy")
}

model Kurti {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    sizes         Json[]
    party         String
    sellingPrice  String 
    actualPrice   String
    category      String
    code          String   @unique
    images        Json[]
    isDeleted     Boolean  @default(false)
    countOfPiece  Int @default(0)
}

model Sell {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sellTime DateTime
  code String
  kurtiSize String
  sellerName String
  kurti Json[]
}