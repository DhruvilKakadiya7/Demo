datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
}

generator client{
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN
  MOD
  REFERRER
  USER
  SELLER
  UPLOADER
  RESELLER
}

enum Status{
  PENDING
  ACCEPTED
  REJECTED
}


model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  phoneNumber   String   @unique
  email         String?   
  emailVerified DateTime?
  image         String?
  password      String?
  organization  String?
  isVerified    Boolean @default(false)
 
  verifiedBy          String?     @db.ObjectId   
  verifiedAt          DateTime?                   

  role          UserRole @default(USER)

  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  verifiedByUser      User?       @relation("VerifiedBy", fields: [verifiedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)


  verifiedUsers       User[]      @relation("VerifiedBy")
}



model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token String @unique
  expires DateTime

  @@unique([phoneNumber,token])
}

model PasswordResetToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token String @unique
  expires DateTime

  @@unique([phoneNumber,token])
}


model TwoFactorToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token String @unique
  expires DateTime

  @@unique([phoneNumber,token])
}

model TwoFactorConfirmation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  @@unique([userId])
}



// secret Token

model SecretToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cfUserName String
  token String @unique
  discordId String
  tokenIssuedAt  DateTime   @default(now())
  expires DateTime

  @@unique([cfUserName,token])
}



model Party {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  name String
  countOfPiece Int @default(0)
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  code String? @unique
  name String
  countTotal Int @default(0)
  countOfPiece Int @default(0)
  countOfDesign Int? @default(0)
  sellingPrice Int? @default(0)
  actualPrice Int? @default(0)
}




model Kurti {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    sizes         Json[]
    party         String
    sellingPrice  String 
    actualPrice   String
    category      String
    code          String   @unique
    images        Json[]
    isDeleted     Boolean  @default(false)
    countOfPiece  Int @default(0)
    lastUpdatedTime DateTime
}

model Sell {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sellTime DateTime
  code String
  kurtiSize String
  sellerName String
  kurti Json[]
}